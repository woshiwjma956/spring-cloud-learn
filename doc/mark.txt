https://www.processon.com/view/link/5e6b6342e4b0e3993b62db71#map
https://gitee.com/exclusiver/springcloud2020/tree/master
SpringCloud,SpringBoot 选型官网介绍参考网址: http://start.spring.io/actuator/info

修改IDEA 配置
IDEA setting -->Edit --> File Types --> ignore files and folders

IDEA run dashboard
可以通过修改idea的workspace.xml的方式来快速打开Run Dashboard窗口
打开workspace.xml文件之后，找到component为RunDashboard的节点处，然后在component标签里添加
<option name="configurationTypes">
      <set>
        <option value="SpringBootApplicationConfigurationType" />
      </set>
</option>
参考 https://jingyan.baidu.com/article/ce4366495a1df73773afd3d3.html

Eureka的自我保护机制
Eureka的自我保护模式主要用于一组客户端和EurekaServer之间存在网络分区场景下进行自我保护,一旦进入保护
模式 EurekaServer 将会尝试保护其服务注册表中的信息,不再删除服务注册表中的信息,也就是不会在注销任何微服务
属于CAP 中的AP 分支
Eureka 默认90S 发送一次心跳检测 如果开启自我保护机制,Eureka允许90S之后未接受到心跳,依然保留服务注册信息 分区容错性
某时刻 某微服务不可用了 Eureka不会立刻清理,依旧会对微服务信息进行保存
关闭自我保护机制
Eureka:
  server:
    # 关闭自我保护机制
    enable-self-preservation: false
    # 移除服务的时间间隔
    eviction-interval-timer-in-ms: 2000

Eureka Client端
eureka:
  instance:
    # 向Eureka Server 发送心跳的频率
    lease-renewal-interval-in-seconds: 1
    # Eureka 服务端在收到最后一次心跳后等待时间上限,超出将剔除服务
    lease-expiration-duration-in-seconds: 2


Eureka Server 配置文件模板:

server:
  port: 7002

spring:
  application:
    name: cloud-server-eureka-7002

eureka:
  instance:
    # eureka 服务端实例名称 不写默认为${spring.application.name} 大写
    appname: eureka7002.com
  client:
    # 是否向注册中心注册自己 false表示不注册
    register-with-eureka: false
    # false 表示自己端就是注册中心,职责是维护服务实例,不需要去检索服务
    fetch-registry: false
    service-url:
      defaultZone: http://eureka7001:7001/eureka/


Eureka Client配置模板

server:
  port: 8002

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/cloud-learn?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: admin
  application:
    # 应用名字要相同 注册到eureka才认为是同一个服务..即服务的高可用
    name: cloud-server-payment

eureka:
  instance:
    # eureka 服务端实例名称 会覆盖Spring.Application.name (默认为 Spring.Application.name 全大写)展示在eureka console中
#    appname: order
    prefer-ip-address: true
#   Eureka 	Status中展示的名称 替代主机名
    instance-id: payment8002
  client:
    #  true 将自己也注册到eureka中成为一个服务实例
    register-with-eureka: true
    # true 需要从eureka中获取服务实例
    fetch-registry: true
    service-url:
#      defaultZone: http://localhost:7001/eureka/
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka

========================================================================================

Spring Cloud 整合 Zookeeper为注册中心

Zookeeper 使用的是临时节点,在未收到心跳检测之后,在配置时间内会立刻从ZK上剔除

采坑错误
org.apache.zookeeper.KeeperException.create(KeeperException.java:103) ~[zookeeper-3.5.3-beta.jar:3.5.3-beta-8ce24f9e675cbefffb8f21a47e06b42864475a60]
Spring Cloud 使用jar中自带ZK客户端工具是3.5.3-beta 如果跟实际服务器上ZK不符则需要排除该依赖,引入对应版本的ZK
      <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>zookeeper</artifactId>
                    <groupId>org.apache.zookeeper</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.6</version>
        </dependency>

配置示例
server:
  port: 80
spring:
  application:
    name: cloud-service-order-zk

  cloud:
    zookeeper:
      # 配置zk连接地址, 多个ZK 以逗号分隔
      connect-string: localhost:2181

========================================================================================
Spring Cloud 整合Consul 为注册中心

Consul 下载：https://www.consul.io/downloads.html
相关命令：consul --version：查看版本信息 consul agent -dev：运行部署consul
========================================================================================
CAP理论
组件名	语言	CAP	服务健康检查	对外暴露接口	Spring Cloud集成
Eureka	Java	AP	可配支持健康检查	HTTP	集成
Consul	GO	CP	支持健康检查	HTTP、DNS	集成
Zookeeper	Java	CP	支持健康检查	客户端	集成
========================================================================================

========================================================================================
Discovery Client

========================================================================================
Ribbon
IRule接口负载规则接口
修改Ribbon默认的轮询规则
默认的规则不能被@ComponentScan 扫描到
@RibbonClient(name="SERVICE_NAME",configuration=IRule.class)

手动实现自定义负载均衡算法
主要目的是体会轮询算法的原理和CAS 和 自旋锁的思想,实际开发中直接实现IRule下面的接口使用@RibbonClient注解修改轮询算法
CompareAndSet 返回Boolean
GetAndSet 返回之前的值
compareAndSet：如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。这里需要注意的是这个方法的返回值实际上是是否成功修改，而与之前的值无关。
getAndSet ：以原子方式设置为给定值，并返回以前的值。
1.为了测试自己的轮询算法ApplicationContextBean去掉注解@LoadBalance
2.LoadBalancer接口
结合DiscoveryClient 选择一个服务
ServiceInstance instances(List<ServiceInstance> serviceList);
3.MyLB 实现LoadBalancer接口
4.OrderController改写
使用RestTemplate去请求LoadBalancer返回的那个ServiceInstance即可
5.Test

修改默认Ribbon的轮询策略 参考https://blog.csdn.net/wo18237095579/article/details/83384134
方式一: Java配置文件方式
1.创建一个@Configuration 配置文件指定全局的轮训规则
2.保证SpringBoot启动不扫描到这个配置文件 @ComponentScan(filter={})
3.@RibbonClient(name = "order", configuration = RibbonLoadBalanceConfiguration.class)

方式二: 使用 ribbon配置文件(未测试通过)
### 针对单个服务的 Ribbon 配置
cloud-service-order:
  ribbon:
    # 基于配置文件形式的 针对单个服务的 Ribbon 负载均衡策略
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

========================================================================================
OpenFeign

==服务调用==
@EnableFeignClients
@FeignClient(name="微服务名") 参考com.ycorn.service.PaymentServiceClient

==超时控制== 参考https://www.cnblogs.com/WaterGe/p/11687118.html
默认feign为1S
java.net.SocketTimeoutException: Read timed out 异常
1 hystrix可配置的部分
hystrix.command.default.execution.timeout.enable=true //为false则超时控制有ribbon控制，为true则hystrix超时和ribbon超时都是用，但是谁小谁生效，默认为true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000//熔断器的超时时长默认1秒，最常修改的参数
circuitBreaker.requestVolumeThreshold=20 //触发熔断的最小请求次数，默认为20
circuitBreaker.sleepWindowInMilliseconds=5000 //休眠时长，默认为5秒
circuitBreaker.errorThresholdPercentage=50 //触发熔断的失败请求最小占比，默认50%
2 ribbon的可配置部分
ribbon.ReadTimeout=1000 //处理请求的超时时间，默认为1秒
ribbon.ConnectTimeout=1000 //连接建立的超时时长，默认1秒
ribbon.MaxAutoRetries=1 //同一台实例的最大重试次数，但是不包括首次调用，默认为1次
ribbon.MaxAutoRetriesNextServer=0 //重试负载均衡其他实例的最大重试次数，不包括首次调用，默认为0次
ribbon.OkToRetryOnAllOperations=false //是否对所有操作都重试，默认false
 3 Feign的可配置部分
feign.hystrix.enabled=false //Feign是否启用断路器,默认为false
feign.client.config.default.connectTimeout=10000 //Feign的连接建立超时时间，默认为10秒
feign.client.config.default.readTimeout=60000 //Feign的请求处理超时时间，默认为60
feign.client.config.default.retryer=feign.Retryer.Default //Feign使用默认的超时配置，在该类源码中可见，默认单次请求最大时长1秒，重试5次

==日志增强==
添加配置
@Configuration
public class FeignLogConfiguration {
    @Bean
    Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }
}
修改yml
# 配置feign 调用日志查看
logging:
  level:
    com.ycorn.service.PaymentServiceFeginClient: debug

========================================================================================
Hystrix
服务提供方
@HystrixCommand
@EnableCircuitBreaker
@HystrixProperties 参考https://blog.csdn.net/jxchallenger/article/details/99657568
com.netflix.hystrix.contrib.javanica.conf.HystrixPropertiesManager 定义了HystrixProperties的属性

客户端 开启
feign:
    hystrix:
        enable: true

@EnableHystrix # 开启Hystrix功能
服务降级 fallback
服务熔断 CircuitBreaker
服务限流 limit

全局的DefaultProperties
@DefaultProperties(defaultFallback="xxx")

FeignFallBack使用注解
@FeignClient(value = ServiceName.PAYMENT_HYSTRIX_SERVICE_NAME, fallback = PaymentServiceFeignClientFallback.class)

==服务熔断== CircuitBreaker
服务保险丝
Open - half Open - Close
断路器核心三参数
sleepWindowInMilliseconds: 快照时间窗口,断路器确定是否打开需要统计一些请求和错误数据,而统计的时间范围就是快照时间窗口,默认是最近10S
requestVolumeThreshold: 请求总数阈值,在快照时间窗口内,必须满足请求总数阈值才有资格熔断,默认20,意味着默认如果10S内,如果hystrix命令
调用次数不足20次,即使所有请求都超时或者失败也不会打开熔断器
errorThresholdPercentage: 错误百分比阈值,默认值50,当在快照窗口时间内,请求次数超过了阈值,超过错误率多少打开熔断器
一段时间后默认是5S,断路器会是半开状态,断路器会让其中一个请求进行转发,如果成功关闭熔断,如果失败继续开启熔断,周而复始
 @HystrixCommand(fallbackMethod = "testCircuitBreakerFallback",
            commandProperties = {
                    @HystrixProperty(name = HystrixPropertiesManager.CIRCUIT_BREAKER_ENABLED, value = "true"), // 开启熔断器
                    @HystrixProperty(name = HystrixPropertiesManager.CIRCUIT_BREAKER_REQUEST_VOLUME_THRESHOLD, value = "10"), //快照时间测量请求的数量
                    @HystrixProperty(name = HystrixPropertiesManager.CIRCUIT_BREAKER_SLEEP_WINDOW_IN_MILLISECONDS, value = "10000"),// 快照时间
                    @HystrixProperty(name = HystrixPropertiesManager.CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE, value = "60"),// 错误率达到多少才开启熔断器
            })

==Dashboard==
stater-actuator 组件需要配置到微服务的包中
http://localhost:9001/hystrix
SpringCloud 2.0升级的坑
ServletRegistrationBean因为Springcloud的默认路径不是"/hystrix.stream"
只需要再自己被监控的项目上配置下面的servlet即可
@Bean
public ServletRegistrationBean<HystrixMetricsStreamServlet> getServlet() {
    HystrixMetricsStreamServlet servlet = new HystrixMetricsStreamServlet();
    ServletRegistrationBean<HystrixMetricsStreamServlet> bean = new ServletRegistrationBean<>(servlet);
    bean.setLoadOnStartup(1);
    bean.addUrlMappings("/hystrix.stream");
    bean.setName("HystrixMetricsStreamServlet");
    return bean;
}

==Turbine==
参考https://www.cnblogs.com/songlu/p/9977260.html
集群监控
http://localhost:9999/turbine.stream

=核心注解=
@EnableTurbine
@EnableDiscoveryClient # 需要发布到注册中心上


=配置模板=
#  turbine.appConfig=shop-product-consumer-hystrix-dashboard,eureka-ribbon-consumer-threadpool
#指定聚合哪些集群，多个使用","分割，默认为 default。可使用http://.../turbine.stream?cluster={clusterConfig 之一}访问turbine.aggregator.clusterConfig= default
# 1. clusterNameExpression 指定集群名称，默认表达式 appName；此时：turbine.aggregator.clusterConfig 需要配置想要监控的应用名称；
# 2. 当 clusterNameExpression: default 时，turbine.aggregator.clusterConfig 可以不写，因为默认就是 default；
# 3. 当 clusterNameExpression: metadata['cluster']时，假设想要监控的应用配置了 eureka.instance.metadata-map.cluster: ABC，
# 则需要配置，同时 turbine.aggregator.clusterConfig:ABC
#  turbine.clusterNameExpression="default"
turbine:
  # 配置 Eureka 中的 serviceId 列表，表明监控哪些服务 逗号分隔
  app-config: CLOUD-SERVER-PAYMENT
  aggregator:
    cluster-config: default
  #指定集群名称，默认表达式 appName；此时：turbine.aggregator.clusterConfig 需要配置想要监控的应用名称；
  cluster-name-expression: new String("default")
  #更改turbine连接的默认uri ,默认为actuator/hystrix.stream
  instanceUrlSuffix: hystrix.stream

== 采坑 ==
SpringCloud2.0之后监控从/actuator/hystrix.stream 改为/hystrix.stream 需要修改配置文件 也保证需要配置一个servlet暴露hystrix监控
instanceUrlSuffix: hystrix.stream

========================================================================================
Spring cloud Gateway

== 配置文件 ==

<--SimpleDemo-->
  cloud:
    gateway:
      enabled: true
      routes:
        - id: baidu_route_guonei
          uri: http://news.baidu.com/guonei
          predicates:
            - Path=/guonei

== Bean配置 ==
@Bean
public RouteLocator baiduRoute(RouteLocatorBuilder builder) {
    return builder.routes()
            .route("baidu_route_guoji",
                    r->r.path("/guoji").and().cookie("username","test")
            .filters(f->f.addRequestHeader("addHeader","myAddHeader"))
            .uri("http://news.baidu.com/guoji"))
            .route("baidu_route_sport",
                    r->r.path("/sports")
            .uri("http://news.baidu.com/sports"))
            .build();
}

== 通过微服务名实现动态路由 ==
配置示例
  cloud:
    gateway:
      enabled: true
      discovery:
        #表示gateway开启服务注册和发现功能,
        #并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务
        locator:
          enabled: true
          #表示将请求路径的服务名配置改成小写  因为服务注册的时候，向注册中心注册时将服务名转成大写的了
          lower-case-service-id: true
      routes:
        - id: cloud-service-payment        # 随机取一个唯一的名字即可
          uri: lb://CLOUD-SERVICE-PAYMENT  #代表从注册中心获取服务，且以lb(load-balance)负载均衡方式转发
          predicates:
            - Path=/payment/**             #表示将以/payment/**开头的请求转发到uri为lb://CLOUD-SERVICE-PAYMENT的地址上
          filters:
            - AddResponseHeader=My-Test-Header,testHAHAHA
#            - StripPrefix=1 #表示将Path的路径/service01在转发前去掉，如果设置StripPrefix=2，表示将/service01/*去掉

== 常用的Predictor ==
After: 某一个时间点之后
格式通过JDK8的ZoneDateTime来生成
ZonedDateTime.now().toString()
- After=2020-03-18T15:54:19.627+08:00[Asia/Shanghai]

Before: 某个时间点之前
- Before=2017-01-20T17:42:47.789-07:00[America/Denver]

Between: 某个时间点之间
- Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]

Cookies: 存在某一个 cookie Key,Value 逗号分隔
- Cookie=chocolate, ch.p

Header: 请求头 Key, Value value支持正则表达式
- Header=X-Request-Id, \d+

Host: 从某一个Host(域名)定位过来 支持Regex
- Host=**.somehost.org,**.anotherhost.org

Method: 请求方法
- Method=GET,POST

Path: 常用 根据请求地址转发 多个,分隔 支持正则
- Path=/red/{segment},/blue/{segment}
- Path=/payment/**

Query: 带某一个查询参数 支持regexp
- Query=green
- Query=red, gree.
The preceding route matches if the request contained a red query parameter whose value matched the gree. regexp, so green and greet would match.
如果请求包含red这个参数并且他的值是满足gree.这个正则规则即可,所有green和greet都可以匹配这个路由

Weight: 权重
routes:
  - id: weight_high
    uri: https://weighthigh.org
    predicates:
    - Weight=group1, 8
  - id: weight_low
    uri: https://weightlow.org
    predicates:
    - Weight=group1, 2
This route would forward ~80% of traffic to weighthigh.org and ~20% of traffic to weighlow.org
这个路由会转发80%的请求给weight_high 20%给low

自定义filter和Spring Cloud Gateway 自带的filter
参考https://www.cnblogs.com/ye-feng-yu/p/11111803.html
Spring Cloud Gateway 自带的filter有很多 参考https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories
类似添加请求头,请求参数,cookie,setStatus等功能
常用:
StripPrefix 用于除去Path中匹配的前缀 填入一个数字表示从/之后开始截取 0表示不截取,1表示截掉第一个/之前的路径
如uri是 /hehe/haha/123  StripPrefix=1 则截取 /haha/123 StripPrefix=2 则截取 /123
# 参考 源码org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory#apply

自定义GlobalGatewayFilter
1.实现GlobalFilter, Ordered接口
2.复写filter方法
    chain.filter(exchange);// 传给一下个filter
    response.setComplete(); //返回状态码不传给下一个filter 返回
参考com.ycorn.gateway.filter.MyGlobalGatewayFilter

========================================================================================

Spring Cloud Config 分布式配置中心

== 配置中心服务端搭建 ==
Spring Cloud Config

@SpringBootApplication
@EnableConfigServer

yml配置
spring:
  application:
    name: cloud-service-config-server
  cloud:
    config:
      enabled: true
      server:
        git:
          uri: https://gitee.com/jianimaoju/spring-cloud-learn-config.git
          search-paths:
            - "spring-cloud-learn-config" # 仓库名
      label: master

访问形式
/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.properties
推荐 第三种
http://configServerHost:port/master/application-dev.yml

== 配置中心客户端搭建 ==
bootstrap.yml 优先于application.yml 加载
bootstrap.yml 是系统级别的配置文件 优先级最高
application.yml 是用户级别的配置文件
整个项目的配置文件 bootstrap.yml + application.yml 且 application.yml中的重复配置会覆盖bootstrap的下的配置文件
bootstrap.yml 配置文件示例
spring:
  application:
    name: cloud-service-config-client
  cloud:
    config:
      enabled: true
      label: master
      uri: http://localhost:3344 # config Server Host
      profile: dev # application-{profile}.yml 获取哪一个文件.默认default

-- 手动刷新配置 --
1.添加暴露的管理端口主要是refresh
management:
  endpoints:
    web:
      exposure:
        include: ["health","info","refresh"]
2.在需要刷新配置文件的类加上@RefreshScope注解 表示该类如果刷新配置文件需要更新

== 整合 Spring bus 实现通知各节点动态刷新配置 ==
1.添加pom
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-bus-amqp</artifactId>
</dependency>
2. Config server 和 Config Client 都注册到 Eureka 或其他注册中心
3.修改 yml文件
整合RabbitMq 添加MQ配置
Config Server & Config Client 添加MQ配置
spring:
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
Config Server 暴露bus/refresh endpoint Config Server 暴露refresh endpoint
management:
  endpoints:
    web:
      exposure:
        include: ["health","info","refresh","bus-refresh"]
4. 发送POST请求通知Config Server 让 ConfigServer 通知Client 刷新配置
curl -X POST "http://localhost:3344/actuator/bus/refresh/{destination}"

== RabbitMQ 的消息日志追踪工具 ==
rabbitmq-plugins enable rabbitmq_tracing
参考 https://blog.csdn.net/xuangey/article/details/91563727
理解pattern的格式
官网介绍：
The firehose publishes messages to the topic exchange amq.rabbitmq.trace with
routing key either “publish.exchangename”, for messages entering the broker, or “deliver.queuename”, for messages leaving the broker;
大概就是抓publish匹配exchange名字，抓消费匹配队列名字。具体如下

#匹配所有的消息，无论是发布还是消费的信息
publish.# 匹配所有发布的消息。
deliver.# 匹配所有被消费的消息。
#.test 如果test是队列，则匹配已经被消费了的test队列的消息。如果test是exchange，则匹配所有经过该exchange的消息。

==  通知方式 ==
1. 全局刷新
curl -X POST "http://localhost:3344/actuator/bus/refresh"

2. 定点通知
curl -X POST "http://localhost:3344/actuator/bus/refresh/{destination}"

其中localhost:3344为配置中心 服务端的地址,{destination}为${spring.application.name}:${server.port}

== 整合 apollo == 实现分布式配置
参考 https://mp.weixin.qq.com/s/4DuOK9bvAedr2FiPQzhRvg
yml配置 参考
app:
  id: apollo-test                            #应用ID
apollo:
  cacheDir: D:\\software\\apollo\\cache                       #配置本地配置缓存目录
  cluster: default                           #指定使用哪个集群的配置
  meta: http://localhost:8080            #DEV环境配置中心地址
  autoUpdateInjectedSpringProperties: true   #是否开启 Spring 参数自动更新
  bootstrap:
    enabled: true                            #是否开启 Apollo
    namespaces: application                  #设置 Namespace
    eagerLoad:
      enabled: false                         #将 Apollo 加载提到初始化日志系统之前

========================================================================================

Spring Cloud Stream
== 核心注解和类 ==
@EnableBinding
@Input
@Output
@StreamListener
MessageBuilder

YML配置示例
spring:
  application:
    # 应用名字要相同 注册到eureka才认为是同一个服务..即服务的高可用
    name: cloud-service-stream-rabbit-consumer
  cloud:
    stream:
      binders: # 绑定器的配置
        local_rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest
                virtual-host: /
      bindings:
        stream_provider_channel: # 表示一个通道的名字
#          destination: stream-demo # 表示rabbitMQ中一个exchange的名字 建议不写直接用channel的Name
          content-type: application/json
          binder: "local_rabbit" # 设置要板顶的消息服务 找一个binders
          group: paymentProviderGroup # 设置消息组 保证消息的持久化和防止重复消

发送代码Demo:
// 用于绑定一个MessageChannel 发送数据
public interface SourceStream {
    String channelName= "stream_provider_channel";

    @Output(channelName)
    MessageChannel streamProviderChannel();
}

@EnableBinding(SourceStream.class) // 使用EnableBinding 来获取 SourceStream中绑定的channel发送数据
public class ProviderMessageServiceImpl {

    @Autowired // 直接注入即可
    private SourceStream sourceStream;

    public void send(String msg) {
    //org.springframework.messaging.support.MessageBuilder用于构建对象
        Message<String> message = MessageBuilder.withPayload(msg).build();
        sourceStream.streamProviderChannel().send(message);
    }
}

接收方代码Demo:
// 用于绑定输入通道
public interface DestStream {

    String CHANNEL_NAME= "stream_provider_channel"; // 这里对应在rabbitMq中的Exchange的概念

    @Input(CHANNEL_NAME)
    SubscribableChannel input();;

}

@EnableBinding(DestStream.class)
@Slf4j
public class MyStreamListener {

    @Value("${server.port}")
    private String port;

    @StreamListener(DestStream.CHANNEL_NAME) //核心注解用于绑定监听
    public void receive(String msg) {
        log.info("receive from provider" + msg + " port:" + port);
    }
}

== 消息持久化 和 消息的重复消费 ==
stream_provider_channel.anonymous.9e71GNKpRLShdiIwdwxHvA
默认Spring Cloud 某一个服务会生成一个 channelName(exchangeName).anonymous.UUID的Queue
默认不配置Group的情况下,在rabbitMQ中会生成anonymous的随机Queue,不同的Queue在绑定同一个交换机会出现消息重复消费的问题
解决办法在yml中指定group属性,相当于指定了Queue的,就会把消费者绑定到指定Queue的队列里面 exchangeName.groupName

消息的持久化 也需要配置Group 项目停止之后再次启动会消费之前已经发送给MQ中的消息,消息不丢失

采坑:
1.spring.cloud.stream.bindings.destination: 会在rabbitmq中创建一个exchange,
但在@Input需要使用这个名字来接受消息,不能使用channelName,建议要么destinationName和channelName一样 或者不设置
2.跳出传统的MVC思维,不需要先写接口在继承实现,如果这样Spring会抛找到2个相同的bean导致注入失败

========================================================================================

Spring Cloud Sleuth

Zipkin Install
1. 直接下载 Jar https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/

2. 编译安装Running from Source
Zipkin can be run from source if you are developing new features. To achieve this, you’ll need to get Zipkin’s source and build it.

# get the latest source
git clone https://github.com/openzipkin/zipkin
cd zipkin
# Build the server and also make its dependencies
./mvnw -DskipTests --also-make -pl zipkin-server clean install
# Run the server
java -jar ./zipkin-server/target/zipkin-server-*exec.jar

== TranceId ==
链路追踪的唯一Id,表示一次请求从客户端进入到结束返回

== SpanId ==
表示调链路轨迹中,某一个服务调用另一个服务的Id,维护的上级parentId关系,通过SpanId串联起来一条微服务调用记录

Zipkin核心节点概念
cs - Client Send. The client has made the request. This sets the beginning of the span.
cs - Client Send. 客户端发送一个请求,这是链路Span的开始

sr - Server Receive: The server has received the request and will start processing it. The difference between this and cs will be combination of network latency and clock jitter.
sr - Server Receive: 服务器接受到请求开始处理, 与CS的时间差值就是网络延迟+时间抖动

ss - Server Send: The server has completed processing and has sent the request back to the client. The difference between this and sr will be the amount of time it took the server to process the request.
ss - Server Send: 服务器完成处理请求并回送给客户端, 与SR的时间差值服务器处理该请求的时间

cr - Client Receive: The client has received the response from the server. This sets the end of the span. The RPC is considered complete when this annotation is recorded.
cr - Client Receive: 客户端最终收到从服务器响应的请求. 这是一条链路Span的重点, 收到annotation标志着RPC调用链路完毕.

========================================================================================

Spring Cloud Alibaba Nacos

官方文档 https://nacos.io/zh-cn/docs/what-is-nacos.html

配置文件参考:
bootstrap.yml 要求nacos配置先与application.yml之前加载
spring:
  profiles:
    active: test
  application:
    # 应用名字要相同 注册到eureka才认为是同一个服务..即服务的高可用
    name: cloud-service-alibaba-payment
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: db04e794-7fea-4aec-840b-ef2b2e23f137
      config:
        server-addr: localhost:8848
        namespace: db04e794-7fea-4aec-840b-ef2b2e23f137  # 配置nacos上创建的命名空间的ID
        file-extension: yaml  # 采坑 目前2.1.0 yml需要写成yaml
        group: DEFAULT_GROUP


== Nacos Config 文件获取规则 ==
默认规则
${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}
DataId为:
以后上面的配置的DataID为cloud-service-alibaba-payment-test.yaml 需要再nacos生成配置文件的时候在db04e794-7fea-4aec-840b-ef2b2e23f137这个
名称空间下创建一个DataID 叫cloud-service-alibaba-payment-test.yaml 的yaml配置文件 才能正常的被Nacos正常加载

== 分组管理 ==
Namespace Group DataId
通过三个维度进行对分布式配置中心的管理
范围是Namespace包Group包DataID

== DataID ==
根据不同的 active 读取不同的DataId配置文件
默认:${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}

== Group ==
在同一个NameSpace下进行GROUP分组便于精细的管理

== Namespace ==
命名空间 nacos支持根据命名管理不同的分布式配置中心和服务发现,方便在Dashboard中分类查看
同一个命名空间的微服务优先被调用
例如按机房部署的城市分成GZ 广州 和 CD 成都 在GZ这个namespace空间下的微服务会优先调用GZ下的

== 集群配置 ==
cluster.conf 类似zk的集群配置
一个节点HOST:PORT 一行一个

== 持久化 ==
在0.7版本之前，在单机模式时nacos使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力，具体的操作步骤：

1.安装数据库，版本要求：5.6.5+
2.初始化mysql数据库，数据库初始化文件：nacos-mysql.sql
3.修改conf/application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。
spring.datasource.platform=mysql

db.num=1
db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
db.user=nacos_devtest
db.password=youdontknow
再以单机模式启动nacos，nacos所有写嵌入式数据库的数据都写到了mysql


== nacos 整合 keepalived 可高可用==
实现通过 keepalived 保证nacos的高可用
参考 但是失败..https://blog.csdn.net/qq_36268452/article/details/104357165

keepalived 配置 测试通过
keepalived 参考https://www.cnblogs.com/clsn/p/8052649.html#auto_id_25
keepalived 配置详细 参考https://blog.csdn.net/mofiu/article/details/76644012
global_defs {
   router_id lb01
}

vrrp_script check {
   script "/etc/keepalived/chk_nacos.sh"
   interval 2 
   weight 2
}

vrrp_instance VI_1 {
    state MASTER
    interface ens33
    virtual_router_id 51
    priority 150
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.132.111
    }
    track_script {
       check
    }
}
vrrp_instance VI_2 {
    state BACKUP
    interface ens33
    virtual_router_id 52
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
	192.168.132.222
    }
   track_script {	
       check
   }
}

chk_nacos.sh 文件 chmod +x

#!/bin/bash
COUNT=$(ps -ef | grep nacos |grep -v "chk_nacos" | grep -v "grep" | wc -l )
echo "nacos服务数量为：$COUNT"
#判断nacos 是否都挂掉了
if [ $COUNT -lt 1 ]; then    
   echo “nacos服务失败，让出master”
   exit 1
else
   echo "检测成功"
   exit 0
fi


========================================================================================

Spring Cloud Alibaba Sentinel

== 流控 flow limit ==

QPS直接失败 QPS每秒请求数
当调用该API的QPS达到阈值时进行限流

== 线程数直接失败 ==
当调用该API的线程数达到阈值时进行限流

QPS限流是在请求还未到服务的之前根据每秒请求个数进行限流
线程限流是在请求已经放行到服务之后,服务器进行处理这个请求使用的线程数,当该请求需要耗时的时候,效果明显

== 关联 ==
当关联资源达到阈值时,就限流自己
当与A关联的资源B达到阈值后,就限流A自己
POSTMAN中Collection创建多线程访问集合组

== 直接失败 ==
DefaultController

== 链路 ==

== 流控限制效果 ==

== 预热  warm up==
ColdFactor 冷因子默认为3
即请求QPS 从 threshold / 3开始,经预热时长逐渐升至设定的QPS阈值
WarmUpController
案例:
QPS阈值为10,预热时长为5
系统初始化阈值为 10/3 约等于3 ,然后经过5秒后阈值才慢慢升高到10

使用场景:
秒杀系统在开启的瞬间,会有很多流量上来,预热的方式是为了保护系统,慢慢的流量放进来,慢慢的把阈值增长到设定的阈值

== 排队等待 ==
匀速排队,让请求以均匀的速度通过,阈值类型只能是QPS
设置含义: 但每秒请求达到阈值的时候,就开始排队等待,等到时间超过设置的超时时间就抛异常
漏桶算法
主要用于处理间隔性突发的流量,例如消息队列
比如某一秒有大量请求,然后之后几秒没有请求进来,希望系统能在接下来的空闲期间逐渐处理请求,而不是第一秒直接拒绝多余的请求
RateLimiterController

== 降级 ==

RT平均响应时间 (DEGRADE_GRADE_RT)：
    当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置

异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：
    当资源的每秒请求量 >= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。

异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：
    当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。

测试在被ControllerAdvice包裹之后的降级策略

== Sentinel 热点Key 降级 ==
BlockException
热点Key 的配置一定要配合@SentinelResource(blockHandler="handlerXXX")
@SentinelResource 主管配置出错,运行时出错该走异常走异常

== 参数例外项 ==
可以在热点key中某一个参数当该参数等于配置的值的时候对阈值进行特殊的处理

== Sentinel 全局配置 ==
Sentinel 针对某一微服务可以设置全局的流控
系统保护规则是从应用级别的入口流量进行控制，从单台机器的
load、CPU 使用率、平均 RT、入口 QPS 和并发线程数
等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。
Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。
CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。
平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。
并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。
入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。

== @SentinelResource ==
不支持private方法
BlockException 的处理注解标签
@SentinelResource(value="resourceName",
blockHandlerClass=MyBlockHandler.class,
blockHandler="StaticMethodName_In_MyBlockHander")
blockHandlerClass中的处理异常处理方法必须是static静态的且与被保护的方法返回值一致

blockHandler / blockHandlerClass: blockHandler 对应处理 BlockException 的函数名称，可选项。blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。

fallback：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：
返回值类型必须与原函数返回值类型一致；
方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。
fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。
特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockHandler 处理逻辑。若未配置 blockHandler、fallback 和 defaultFallback，则被限流降级时会将 BlockException 直接抛出（若方法本身未定义 throws BlockException 则会被 JVM 包装一层 UndeclaredThrowableException）。

== Sentinel 熔断 ==
fallback 管 java RuntimeException
blockHandler 管 sentinel 配置控制配置违规 如流控 热点流控
如果fallback和blockHandler都配置了,则会被限流降级而抛出BlockException,只会进入blockHandler逻辑处理,不会走fallback逻辑

============ 采坑  ===========
2.1.0 RELEASE 版本建议把blockHandlerClass 和 fallbackClass 都配上
并且建议把BlockHandler和Fallback中的方法最后一个参数都加上BlockException 或者 Throwable
经测试如果 BlockHandler 中的方法最后一个参数没有加BlockException 但Fallback处理方法中加入Throwable参数,及时是BlockException 也会被Fallback捕获

== exceptionsToIgnore ==
排除需要sentinel 保护的异常..排除该异常之后.会直接走RuntimeException 该抛异常抛异常
@SentinelResource(value = "ribbon_testExceptionIgnore",
        blockHandlerClass = ConsumerControllerBlockHandler.class,
        blockHandler = "defaultFallback",
        fallbackClass = ConsumerControllerFallback.class,
        fallback = "defaultFallback",
        exceptionsToIgnore = IllegalArgumentException.class
)

== sentinel 整合 openFeign + fallback ==
必须配置一下让openFeign 的@FeignClient中的fallback属性生效
feign:
  sentinel:
    enabled: true

== sentinel 规则持久化 ==
官网推荐 sentinel规则持久化到nacos中
<dependency>
      <groupId>com.alibaba.csp</groupId>
      <artifactId>sentinel-datasource-nacos</artifactId>
 </dependency>

spring:
  cloud:
    sentinel:
      datasource:
        my_flow:
          nacos:
            server-addr: localhost:8848
            dataId: ${spring.application.name}-flow-rules
            groupId: SENTINEL_GROUP
            # 规则类型，取值见：org.springframework.cloud.alibaba.sentinel.datasource.RuleType
            rule_type: flow
        my_degrade:
          nacos:
            server-addr: localhost:8848
            dataId: ${spring.application.name}-degrade-rules
            groupId: SENTINEL_GROUP
            rule-type: degrade

nacos: 配置 选json
规则配置JSON 参考org.springframework.cloud.alibaba.sentinel.datasource.RuleType 下的具体规则POJO中的属性
流控规则JSON 示例
[
    {
        "resource": "/rateLimit/byUrl",
        "limitApp" : "default",
        "grade": 1,
        "count" : 1,
        "strategy": 0,
        "controlBehavior" : 0,
        "clusterMode": false
    }
]
降级规则JSON 示例
[{
    "resource": "feigin_consumeSentinelCircuitBreaking",
	"count": 0.3,
	"grade": 1,
	"timeWindow": 10
}]
resource： 资源名称
limitApp： 来源应用
grade： 阈值类型，0表示线程数，1表示 QPS
count: 单机阈值
strategy: 流控模式， 0 - 表示直接，1表示关联，2表示链路
controlBehavior： 流控效果，0表示快速失败，1表示Warm up , 2表示排队
clusterMode： 是否集群。


== 分布式事务 Seata ==